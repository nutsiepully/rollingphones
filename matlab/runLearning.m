%loadMat;

%This matrix is generated by createFeatures.m


load('genFeatures.mat');

cV = 5;
split = crossvalind('Kfold', size(Xtrain,1), cV);
split = sort(split);
%{
for i = 1:cV
    trainSub = XgenTrain(split~=i, :);
    trainSubY = Ytrain(split~=i, :);
    testSub = XgenTrain(split==i, :);
    testSubY = Ytrain(split==i, :);
    fprintf('Training on CV Features. Cross Validation round %d\n', i);        
    SVMStruct = svmtrain(trainSubY, trainSub, '-q');
    fprintf('Testing on CV Features.\n');
    [lbl1, acc1, prob1] = svmpredict(trainSubY, trainSub, SVMStruct);
    [lbl2, acc2, prob2] = svmpredict(testSubY, testSub, SVMStruct);
    
    newlbl2 = hmmsmoothing(trainSubY, lbl1, lbl2);
    newacc2 = 100*mean(newlbl2 == testSubY);
    fprintf('HMM smoothing gives us %4.2f accuracy \n', newacc2);
end
%}

fprintf('Training on Generated Train Features.\n');
SVMStruct2 = svmtrain(Ytrain, XgenTrain, '-q');
fprintf('Testing on Generated Test Features.\n');
[lbl3, acc3, prob3] = svmpredict(Ytest ,XgenTest,SVMStruct2);
XgenPC = XgenPhone;
XgenPC(XgenPC >1) = 1;
XgenPC(XgenPC <-1) = -1;
[lbl32, acc32, prob32] = svmpredict(Yphone ,XgenPC,SVMStruct2);


fprintf('Training on Given Features.\n');
SVMStruct3 = svmtrain(Ytrain, Xtrain, '-q');
fprintf('Testing on Given Features.\n');
[lbl4, acc4, prob4] = svmpredict(Ytest ,Xtest,SVMStruct3);
